, group = 1)
#, fill = as.factor(key)
)+
facet_wrap(~ cluster
,ncol = 1)
ggplot(d_plot ) +
geom_bar( aes( x = forcats::as_factor(value)
, y = ..prop..
, fill = key
, group = key)
#, fill = as.factor(key)
)+
facet_wrap(~ cluster
,ncol = 1)
ggplot(d_plot) +
geom_bar( aes( x = forcats::as_factor(value)
, y = ..prop..
, fill = key
, group = key
)
)
ggplot(d_plot ) +
geom_bar( aes( x = forcats::as_factor(value)
, y = ..prop..
, fill = key
, group = key)
)+
facet_wrap(~ cluster
,ncol = 1)
d_plot = d_plot %>%
bind_cols( select(d_order, order) )%>%
arrange( order ) %>%
mutate( value = forcats::as_factor(value))
d_plot = data_pred %>%
as_tibble() %>%
select( one_of(factors), cluster ) %>%
gather(key = 'key', value = 'value', one_of(factors) )
# to preserve factor order we have to add a sorting column
d_order = data_pred %>%
as_tibble() %>%
select( one_of(factors), cluster ) %>%
mutate_all( as.integer ) %>%
gather(key = 'key', value = 'order', one_of(factors) ) %>%
mutate( order = stringr::str_c(key, order))
d_plot = d_plot %>%
bind_cols( select(d_order, order) )%>%
arrange( order ) %>%
mutate( value = forcats::as_factor(value))
ggplot(d_plot ) +
geom_bar( aes( x = forcats::as_factor(value)
, y = ..prop..
, fill = key
, group = key)
)+
facet_wrap(~ cluster
,ncol = 1)
link = tibble( map_loc = names(som_cluster_adj) %>% as.integer()
,cluster = som_cluster_adj)
pred = tibble( map_loc = m$unit.classif) %>%
left_join(link)
data_pred = data %>%
bind_cols(pred)
# plot numericals absolute values
d_plot = data_pred %>%
as_tibble() %>%
select( one_of(numerics), cluster ) %>%
gather(key = 'key', value = 'value', one_of(numerics) )
medians = d_plot %>%
group_by(key, cluster) %>%
summarize_all( median)
ggplot(d_plot, aes(x = as.factor(cluster)
, y = value) ) +
geom_violin( aes( fill = as.factor(cluster)) ) +
geom_crossbar( data = medians
, mapping = aes(x = as.factor(cluster)
,ymin = value
,ymax = value)) +
facet_wrap(~key
, scales = 'free_y'
, ncol = 1)+
labs(title = 'Absolute Values of\nnumeric variables'
)
# plot numericals scaled values
d_plot_scale = data %>%
select( one_of(numerics) ) %>%
scale(center = T) %>%
as_tibble() %>%
bind_cols(pred) %>%
gather(key = 'key', value = 'value', one_of(numerics) )
medians = d_plot_scale %>%
group_by(key, cluster) %>%
summarize_all( median)
ggplot(medians, aes(x = as.factor(key)
, y = value) ) +
geom_bar( aes( fill = as.factor(key))
,stat = 'identity') +
geom_hline(yintercept = 0
,size = 1) +
facet_wrap(~cluster
, ncol = 1
) +
labs(title = 'Median values of scaled and centered\nnumeric variables')
# categoricals--------------------------------------------------------
d_plot = data_pred %>%
as_tibble() %>%
select( one_of(factors), cluster ) %>%
gather(key = 'key', value = 'value', one_of(factors) )
# to preserve factor order we have to add a sorting column
d_order = data_pred %>%
as_tibble() %>%
select( one_of(factors), cluster ) %>%
mutate_all( as.integer ) %>%
gather(key = 'key', value = 'order', one_of(factors) ) %>%
mutate( order = stringr::str_c(key, order))
d_plot = d_plot %>%
bind_cols( select(d_order, order) )%>%
arrange( order ) %>%
# we have to convert value to factor here
# ggplot will mess up the order if some
# facet groups dont have all levels()
mutate( value = forcats::as_factor(value))
ggplot(d_plot ) +
geom_bar( aes( x = forcats::as_factor(value)
, y = ..prop..
, fill = key
, group = key)
)+
facet_wrap(~ cluster
,ncol = 1)
ggplot(d_plot) +
geom_bar( aes( x = forcats::as_factor(value)
, y = ..prop..
, fill = key
, group = key
)
)
ggplot(data_pred, aes(x = cluster)) %>%
geom_bar()
ggplot(data_pred, aes(x = cluster)) +
geom_bar()
ggplot(data_pred, aes(x = as.factor(cluster))) +
geom_bar()
ggplot(data_pred, aes(x = as.factor(cluster)
, fill = cluster)) +
geom_bar()
ggplot(data_pred, aes(x = as.factor(cluster)
, fill = as.factor(cluster))) +
geom_bar()
ggplot(data_pred, aes(x = as.factor(cluster)
, fill = as.factor(cluster))
) +
geom_bar(show.legend = F)
ggplot(d_plot ) +
geom_bar( aes( x = forcats::as_factor(value)
, y = ..prop..
, fill = key
, group = key)
)+
facet_wrap(~ cluster
,ncol = 1) +
theme(axis.title.x = element_text(angle = 90))
ggplot(d_plot ) +
geom_bar( aes( x = forcats::as_factor(value)
, y = ..prop..
, fill = key
, group = key)
)+
facet_wrap(~ cluster
,ncol = 1) +
theme(axis.title.x = element_text(angle = 180))
ggplot(d_plot ) +
geom_bar( aes( x = forcats::as_factor(value)
, y = ..prop..
, fill = key
, group = key)
)+
facet_wrap(~ cluster
,ncol = 1) +
theme(axis.text.x = element_text(angle = 90))
View(data_pred)
m = rpart(cluster~.-map_loc, data_pred)
summary(m)
rpart.plot::rpart.plot(m)
m = rpart::rpart(cluster~.-map_loc, data_pred)
rpart.plot::prp(m
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
, tweak         = 3
#, gap           = input$gap
#, space         = input$space
)
data_pred$cluster = as.factor(data_pred$cluster)
m = rpart::rpart(cluster~.-map_loc, data_pred)
rpart.plot::prp(m
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
, tweak         = 3
#, gap           = input$gap
#, space         = input$space
)
data_pred$cluster = as.factor(data_pred$cluster)
m = rpart::rpart(cluster~.-map_loc, data_pred)
rpart.plot::prp(m
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
#, tweak         = 3
#, gap           = input$gap
#, space         = input$space
)
data_pred$cluster = as.factor(data_pred$cluster)
m = rpart::rpart(cluster~.-map_loc, data_pred)
rpart.plot::prp(m
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
, tweak         = 2
#, gap           = input$gap
#, space         = input$space
)
data_pred$cluster = as.factor(data_pred$cluster)
m = rpart::rpart(cluster~.-map_loc, data_pred)
rpart.plot::prp(m
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
, tweak         = 2
#, gap           = input$gap
#, space         = input$space
)
rpart.plot::rpart.plot(m
, fallen.leaves = T
, tweak         = 2
#, gap           = input$gap
#, space         = input$space
)
m$variable.importance
m
m$cptable
m$frame
m$frame
m$splits
m$y
?rpart::rpart()
?rpart::rpart
m$frame
frame = m$frame
View(frame)
frame = m$where
summary(m)
s = summary(m)
s
rpart.plot::rpart.plot(m)
frame = m$splits
View(frame)
m$numresp
m$where
m
m$frame
frame = m$frame
m
s
summary(m)
frame2 = m$where
frame2
m$where
m$where[1]
data_pred$node = m$where
View(data_pred)
m$frame %>%
mutate( node = row.names(.))
row.names(m$frame)
m$frame %>%
mutate( node = row.names(m$frame) )
m$frame %>%
as_tibble() %>%
mutate( node = row.names(.) )
row.names(m$frame)
m$frame$node = row.names(m$frame)
frame = m$frame %>%
select(node, yval)
data_pred =  data_pred %>%
left_join( select(m$frame,node, yval) )
m$frame$node = row.names(m$frame) %>%
as.integer()
data_pred =  data_pred %>%
left_join( select(m$frame,node, yval) )
distinct(m$where)
distinct(as.factor(m$where) )
summary(as.factor(m$where) )
frame = m$frame
m = rpart::rpart(cluster~.-map_loc, data_pred)
frame = m$frame
nrow(m$frame)
top_n(m$where, 20)
m$where[1:20]
summary(as.factor(m$where) )
m$frame$node = 1:nrow(m$frame)
frame = m$frame
View(frame)
data_pred =  data_pred %>%
left_join( select(m$frame,node, yval) )
link = tibble( map_loc = names(som_cluster_adj) %>% as.integer()
,cluster = som_cluster_adj)
pred = tibble( map_loc = m$unit.classif) %>%
left_join(link)
clust_adj = hclust(as.dist(dist_adj), 'ward.D2')
som_cluster_adj = cutree(clust_adj, 10)
plot(m, type="codes", main = "Clusters", bgcol = pretty_palette[som_cluster_adj], pchs = NA)
remove(data_pred$node)
data_pred = data_pred %>%
select(-node, -yval)
data_pred$node = m$where
m_tree$frame$node = 1:nrow(m$frame)
m_tree = rpart::rpart(cluster~.-map_loc, data_pred)
data_pred$node = m_tree$where
m_tree$frame$node = 1:nrow(m$frame)
m_tree$frame$node = 1:nrow(m_tree$frame)
data_pred =  data_pred %>%
left_join( select(m_tree$frame,node, yval) )
data_pred =  data_pred %>%
#left_join( select(m_tree$frame,node, yval) )%>%
mutate( pred_true = ifelse( yval == cluster, 1,0))
data_sum = data_pred %>%
group_by(node)%>%
summarise( prop = sum(pred_true)/n() )
View(df)
View(data_sum)
data_sum = data_pred %>%
group_by(node,yval)%>%
summarise( prop = sum(pred_true)/n() )
data_pred$cluster = as.factor(data_pred$cluster)
m_tree = rpart::rpart(cluster~.-map_loc, data_pred)
rpart.plot::prp(m_tree
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
, tweak         = 2
#, gap           = input$gap
#, space         = input$space
)
# add node numbers to data
data_pred$node = m_tree$where
# predicted class for each node
m_tree$frame$node = 1:nrow(m_tree$frame)
data_pred =  data_pred %>%
left_join( select(m_tree$frame,node, yval) )%>%
mutate( pred_true = ifelse( yval == cluster, 1,0))
data_sum = data_pred %>%
group_by(node,yval)%>%
summarise( prop = sum(pred_true)/n() )
data_sum
data_pred$cluster = as.factor(data_pred$cluster)
m_tree = rpart::rpart(cluster~.-map_loc, data_pred)
rpart.plot::prp(m_tree
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
, tweak         = 2
#, gap           = input$gap
#, space         = input$space
)
# add node numbers to data
data_pred$node = m_tree$where
# predicted class for each node
m_tree$frame$node = 1:nrow(m_tree$frame)
data_pred =  data_pred %>%
left_join( select(m_tree$frame,node, yval) )%>%
mutate( pred_true = ifelse( yval == cluster, 1,0))
data_sum = data_pred %>%
group_by(node,yval)%>%
summarise( prop = sum(pred_true)/n() )
data_sum
link = tibble( map_loc = names(som_cluster_adj) %>% as.integer()
,cluster = som_cluster_adj)
pred = tibble( map_loc = m$unit.classif) %>%
left_join(link)
data_pred = data_pred %>%
select(-node, -yval, -pred_true)
data_pred$cluster = as.factor(data_pred$cluster)
m_tree = rpart::rpart(cluster~.-map_loc, data_pred)
rpart.plot::prp(m_tree
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
, tweak         = 2
#, gap           = input$gap
#, space         = input$space
)
# add node numbers to data
data_pred$node = m_tree$where
# predicted class for each node
m_tree$frame$node = 1:nrow(m_tree$frame)
data_pred =  data_pred %>%
left_join( select(m_tree$frame,node, yval) )%>%
mutate( pred_true = ifelse( yval == cluster, 1,0))
data_sum = data_pred %>%
group_by(node,yval)%>%
summarise( prop = sum(pred_true)/n() )
data_sum
data_pred = data_pred %>%
select(-node, -yval, -pred_true)
data_pred = data_pred %>%
select(-node, -yval, -pred_true)
data_pred_tree = data_pred
data_pred_tree$cluster = as.factor(data_pred_tree$cluster)
m_tree = rpart::rpart(cluster~.-map_loc, data_pred_tree)
rpart.plot::prp(m_tree
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
, tweak         = 2
#, gap           = input$gap
#, space         = input$space
)
# add node numbers to data
data_pred_tree$node = m_tree$where
# predicted class for each node
m_tree$frame$node = 1:nrow(m_tree$frame)
data_pred_tree =  data_pred_tree %>%
left_join( select(m_tree$frame,node, yval) )%>%
mutate( pred_true = ifelse( yval == cluster, 1,0))
data_sum = data_pred_tree %>%
group_by(node,yval)%>%
summarise( prop = sum(pred_true)/n() )
data_sum
data_pred_tree = data_pred
data_pred_tree$cluster = as.factor(data_pred_tree$cluster)
m_tree = rpart::rpart(cluster~.-map_loc, data_pred_tree)
rpart.plot::prp(m_tree
, branch.type   = 5
, box.palette   ="RdYlGn"
, faclen        = 0
, extra         = 6
, fallen.leaves = T
, tweak         = 2
#, gap           = input$gap
#, space         = input$space
)
# add node numbers to data
data_pred_tree$node = m_tree$where
# predicted class for each node
m_tree$frame$node = 1:nrow(m_tree$frame)
data_pred_tree =  data_pred_tree %>%
left_join( select(m_tree$frame,node, yval) )%>%
mutate( pred_true = ifelse( yval == cluster, 1,0))
data_sum = data_pred_tree %>%
group_by(node,yval)%>%
summarise( prop = sum(pred_true)/n()
,n   = n() )
data_sum
data_sum = data_pred_tree %>%
summarise( prop = sum(pred_true)/n()
,n   = n() )
data_sum
data
data_hier = data %>%
scale()
data_hier[, numeric ] %<>% scale ()
require(magrittr)
data_hier[, numeric ] %<>% scale ()
data_hier = data
data_hier[, numeric ] %<>% scale ()
data_hier[, numerics ] %<>% scale ()
dist_gow = cluster::daisy(data_hier
,metric = 'gower')
daisy(data_hier, metric = c( "gower"),
stand = FALSE, type = list(), weights = rep.int(1, p),
warnBin = warnType, warnAsym = warnType, warnConst = warnType,
warnType = TRUE)
dist_gow = cluster::daisy(data_hier, metric = c( "gower"),
stand = FALSE, type = list(), weights = rep.int(1, p),
warnBin = warnType, warnAsym = warnType, warnConst = warnType,
warnType = TRUE)
?cluster::daisy
dist_gow = cluster::daisy(data_hier
, metric = c( "gower")
, stand = FALSE
, type = list()
#, weights = rep.int(1, p)
, warnBin = T
, warnAsym = T
, warnConst = T
, warnType = TRUE)
memory.limit()
object.size(data_hier)
object.size(data_hier, units = 'MB')
object.size(data_hier, units = '')
b
object.size(data_hier, units = 'b')
object.size(x = data_hier, units = 'b')
utils::object.size(x = data_hier, units = 'b')
